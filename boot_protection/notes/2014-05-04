Today I continued with getting the whole while loop working for attempting to
boot multiple images.

as usual, we the documentation for how to do these while loops and such is
almost completely lacking

things I'm trying (since u-boot doesn't support command history):
---
while test $NUM_IMAGES > 0; do; setexpr kernadd ${kernadd} + ${KERNEL_SIZE}; setexpr NUM_IMAGES NUM_IMAGES - 1 ;  done
---

my script command
---
source 0x2B82C
---

and I needed to add CONFIG_CMD_ECHO

now I tested with my faulty image as the first
---
VersatilePB # imi 0x34000000

## Checking Image at 34000000 ...
   Legacy image found
   Image Name:   Linux-3.2.57
   Image Type:   ARM Linux Kernel Image (uncompressed)
   Data Size:    1737408 Bytes = 1.7 MiB
   Load Address: 00008000
   Entry Point:  00008000
   Verifying Checksum ...    Bad Data CRC
---

but... my editing of the uImage had changed the size of the image. Our fault
model won't cover that since we assume the images were written to flash cleanly

but the script worked wonderfully

The next step is to make a nicer python script to replace the messy Makefile or
figure out the u-boot environment thing or figure out how to get a user
application working properly

I decided to work on the environment so that it would boot into the script
automatically

I need to do something with 'autostart' or 'autoboot'

ah!
---
http://www.denx.de/wiki/view/DULG/UBootEnvVariables
bootdelay: After reset, U-Boot will wait this number of seconds before it
executes the contents of the bootcmd variable. During this time a countdown is
printed, which can be interrupted by pressing any key. 
---

oh joy, more header file stuff
---
  CONFIG_BOOTDELAY
  CONFIG_BOOTCOMMAND
---

even tried passing "bootdelay=3" through 'append'

maybe I should put the script in flash and then use that as the
CONFIG_BOOTCOMMAND? I think I need to, otherwise things will get really weird
since the size of the u-boot image changes with the command, which can change
the location!

okay, thinking about that...
---
[zak@ungar code]$ ls -l script.img
-rw-rw-r--. 1 zak zak 865 May  4 15:34 script.img
---

and now I can't find the kernel images

magic number: 56190527


---
[zak@ungar code]$ printf "0x%X\n" `stat -c%s ./script.img`
0x365
---

---
VersatilePB # imi 0x34000365

## Checking Image at 34000365 ...
   Legacy image found
   Image Name:   Linux-3.2.57
   Image Type:   ARM Linux Kernel Image (uncompressed)
   Data Size:    1737408 Bytes = 1.7 MiB
   Load Address: 00008000
   Entry Point:  00008000
   Verifying Checksum ... OK
---

now I can go ahead and make that the boot command

I then edited the BOOTDELAY AND BOOTCMD that were listed

---
#define CONFIG_BOOTCOMMAND "source 0x34000000"
---

and apparently that causes u-boot to fail building:
---
:257: undefined reference to `default_serial_console'
arm-linux-gnu-ld.bfd: error: required section '.rel.plt' not found in the linker
script
arm-linux-gnu-ld.bfd: final link failed: Invalid operation
make[1]: *** [u-boot] Error 1
make: *** ["./u-boot-2013.10/u-boot.bin"] Error 2
---

I added '#define CONFIG_INITRD_TAG   1' and that seems to have done the trick -
why, I don't know...

now it automatically runs and verifies the kernels
